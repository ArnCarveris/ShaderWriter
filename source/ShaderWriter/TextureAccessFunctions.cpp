
/*
See LICENSE file in root folder
*/

#include "ShaderWriter/TextureAccessFunctions.hpp"

#include <ASTGenerator/Expr/MakeTextureAccess.hpp>

namespace sdw
{
#pragma region textureSize
	/**
	*name
	*	textureSize
	*/
	/**@{*/
	Int textureSize( SampledImage1DRgba32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DRgba16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DRg32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DRg16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DR32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DR16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage3DR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DShadowR32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( SampledImage1DShadowR16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DShadowR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DShadowR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeShadowR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImageCubeShadowR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayShadowR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImageCubeArrayShadowR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayShadowR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage1DArrayShadowR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayShadowR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayShadowFR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( SampledImage2DArrayShadowR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayShadowFR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRgba32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRgba16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRgba8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRg32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRg16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DRg8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DR32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DR16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( ISampledImage1DR8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage2DR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage3DR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImageCubeR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImageCubeArrayR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( ISampledImage1DArrayR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( ISampledImage2DArrayR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRgba32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRgba16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRgba8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRg32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRg16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DRg8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DR32 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DR16 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	Int textureSize( USampledImage1DR8 const & image
		, Int const & lod )
	{
		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage2DR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage3DR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImageCubeR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImageCubeArrayR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayRg8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayR32 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayR16 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( USampledImage1DArrayR8 const & image
		, Int const & lod )
	{
		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRgba32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRgba16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRgba8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRg32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRg16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayRg8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayR32 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR32( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayR16 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR16( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec3 textureSize( USampledImage2DArrayR8 const & image
		, Int const & lod )
	{
		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR8( makeExpr( image )
				, makeExpr( lod ) ) };
	}
	IVec2 textureSize( SampledImage2DRectRgba32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFRgba32( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectRgba16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFRgba16( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectRg32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFRg32( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectRg16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFRg16( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectR32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFR32( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectR16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectFR16( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectShadowR32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectShadowFR32( makeExpr( image ) ) };
	}
	IVec2 textureSize( SampledImage2DRectShadowR16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectShadowFR16( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRgba32( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRgba16( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRg32( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRg16( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFR32( makeExpr( image ) ) };
	}
	Int textureSize( SampledImageBufferR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFR16( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRgba32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRgba32( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRgba16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRgba16( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRgba8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRgba8( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRg32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRg32( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRg16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRg16( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectRg8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIRg8( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectR32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIR32( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectR16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIR16( makeExpr( image ) ) };
	}
	IVec2 textureSize( ISampledImage2DRectR8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectIR8( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba32( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba16( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba8( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg32( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg16( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg8( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR32( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR16( makeExpr( image ) ) };
	}
	Int textureSize( ISampledImageBufferR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR8( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRgba32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURgba32( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRgba16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURgba16( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRgba8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURgba8( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRg32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURg32( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRg16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURg16( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectRg8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectURg8( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectR32 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectUR32( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectR16 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectUR16( makeExpr( image ) ) };
	}
	IVec2 textureSize( USampledImage2DRectR8 const & image )
	{
		return IVec2{ findShader( image )
			, expr::makeTextureSize2DRectUR8( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba32( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba16( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba8( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg32( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg16( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg8( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR32( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR16( makeExpr( image ) ) };
	}
	Int textureSize( USampledImageBufferR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR8( makeExpr( image ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureQueryLod
	/**
	*name
	*	textureQueryLod
	*/
	/**@{*/
	Vec2 textureQueryLod( SampledImage1DRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DShadowR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DShadowR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DShadowR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DShadowR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeShadowR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeShadowR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayShadowR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage1DArrayShadowR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayShadowR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImage2DArrayShadowR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayShadowR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayShadowFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( SampledImageCubeArrayShadowR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayShadowFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRgba8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DRg8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DR8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage3DR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRgba8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayRg8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage1DArrayR8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRgba8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayRg8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImage2DArrayR8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( ISampledImageCubeArrayR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRgba8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DRg8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DR8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage3DR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRgba32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRgba16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRgba8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayRg8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayR32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayR16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage1DArrayR8 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRgba8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayRg8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayR32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayR16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImage2DArrayR8 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRgba32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRgba16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRgba8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayRg8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayR32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayR16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureQueryLod( USampledImageCubeArrayR8 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureQueryLevels
	/**
	*name
	*	textureQueryLevels
	*/
	/**@{*/
	Int textureQueryLevels( SampledImage1DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage3DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage1DArrayShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImage2DArrayShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayShadowR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayShadowFR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( SampledImageCubeArrayShadowR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayShadowFR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage3DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage1DArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImage2DArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( ISampledImageCubeArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage3DR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage1DArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImage2DArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRgba32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRgba16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRgba8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRg32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRg16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayRg8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg8( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayR32 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR32( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayR16 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR16( makeExpr( image ) ) };
	}
	Int textureQueryLevels( USampledImageCubeArrayR8 const & image )
	{
		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR8( makeExpr( image ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texture
	/**
	*name
	*	texture
	*/
	/**@{*/
	Vec4 texture( SampledImage1DRgba32 const & image
		, Float const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture1DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage1DRgba16 const & image
		, Float const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture1DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage1DRg32 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture1DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage1DRg16 const & image
		, Float const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture1DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage1DR32 const & image
		, Float const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture1DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage1DR16 const & image
		, Float const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture1DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture3DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture3DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture3DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture3DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture3DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture3DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureCubeFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureCubeFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture1DArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture1DArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage1DArrayRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture1DArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage1DArrayRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture1DArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage1DArrayR32 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture1DArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage1DArrayR16 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture1DArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureCubeArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureCubeArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DRectFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texture( SampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexture2DRectFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DRectFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texture( SampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexture2DRectFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DRectFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexture2DRectFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DRgba32 const & image
		, Float const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DRgba16 const & image
		, Float const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DRgba8 const & image
		, Float const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DRg32 const & image
		, Float const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DRg16 const & image
		, Float const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DRg8 const & image
		, Float const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DR32 const & image
		, Float const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DR16 const & image
		, Float const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DR8 const & image
		, Float const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage3DRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage3DRg8 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture3DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture3DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage3DR8 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture3DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DArrayR32 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DArrayR16 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage1DArrayR8 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DArrayR8 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DRectIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DRectIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texture( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexture2DRectIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DRectIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DRectIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texture( ISampledImage2DRectRg8 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexture2DRectIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DRectIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DRectIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texture( ISampledImage2DRectR8 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexture2DRectIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DRgba32 const & image
		, Float const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DRgba16 const & image
		, Float const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DRgba8 const & image
		, Float const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DRg32 const & image
		, Float const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DRg16 const & image
		, Float const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DRg8 const & image
		, Float const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DR32 const & image
		, Float const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DR16 const & image
		, Float const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DR8 const & image
		, Float const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage3DRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage3DRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage3DRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage3DRg32 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage3DRg16 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage3DRg8 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage3DR32 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage3DR16 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage3DR8 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg32 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg16 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg8 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DArrayR32 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DArrayR16 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage1DArrayR8 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg8 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DArrayR8 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImageCubeArrayR8 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DRectURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DRectURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texture( USampledImage2DRectRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexture2DRectURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DRectURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DRectURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texture( USampledImage2DRectRg8 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexture2DRectURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DRectUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DRectUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texture( USampledImage2DRectR8 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexture2DRectUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texture( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImageCubeShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImageCubeShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImageCubeArrayShadowR32 const & image
		, Vec4 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float texture( SampledImageCubeArrayShadowR16 const & image
		, Vec4 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureBias
	/**
	*name
	*	textureBias
	*/
	/**@{*/
	Vec4 texture( SampledImage1DRgba32 const & image
		, Float const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage1DRgba16 const & image
		, Float const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage1DRg32 const & image
		, Float const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage1DRg16 const & image
		, Float const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DR32 const & image
		, Float const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DR16 const & image
		, Float const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 texture( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 texture( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DRgba32 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DRgba16 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DRgba8 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DRg32 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DRg16 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DRg8 const & image
		, Float const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DR32 const & image
		, Float const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DR16 const & image
		, Float const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DR8 const & image
		, Float const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 texture( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 texture( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int texture( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DRgba32 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DRgba16 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DRgba8 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DRg32 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DRg16 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DRg8 const & image
		, Float const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DR32 const & image
		, Float const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DR16 const & image
		, Float const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DR8 const & image
		, Float const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 texture( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 texture( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt texture( USampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureCubeShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImageCubeShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureCubeShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DArrayShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DArrayShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DArrayShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float texture( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DArrayShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProj
	/**
	*name
	*	textureProj
	*/
	/**@{*/
	Vec4 textureProj( SampledImage1DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF2Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF2Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage1DRg32 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF2Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage1DRg16 const & image
		, Vec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF2Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage1DR32 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF2R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage1DR16 const & image
		, Vec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF2R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage1DRg32 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage1DRg16 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage1DR32 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage1DR16 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DR32 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DR16 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRg32 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRg16 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DR32 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DR16 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage3DRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj3DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage3DRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj3DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage3DRg32 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj3DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage3DRg16 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj3DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage3DR32 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj3DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage3DR16 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj3DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRectRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DRectF3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRectRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DRectF3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRectRg32 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DRectF3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRectRg16 const & image
		, Vec3 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DRectF3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DRectR32 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DRectF3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DRectR16 const & image
		, Vec3 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DRectF3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRectRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DRectF4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureProj( SampledImage2DRectRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DRectF4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRectRg32 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DRectF4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 textureProj( SampledImage2DRectRg16 const & image
		, Vec4 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DRectF4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DRectR32 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DRectF4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage2DRectR16 const & image
		, Vec4 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTextureProj2DRectF4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg32 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg16 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg8 const & image
		, Vec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR32 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR16 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR8 const & image
		, Vec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg32 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg16 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg8 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR32 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR16 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage1DR8 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg32 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg16 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg8 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR32 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR16 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR8 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg32 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg16 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg8 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR32 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR16 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DR8 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg32 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg16 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg8 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage3DR32 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage3DR16 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage3DR8 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg32 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg16 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg8 const & image
		, Vec3 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI3Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR32 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR16 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR8 const & image
		, Vec3 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI3R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureProj( ISampledImage2DRectRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg32 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg16 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 textureProj( ISampledImage2DRectRg8 const & image
		, Vec4 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectI4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR32 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR16 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int textureProj( ISampledImage2DRectR8 const & image
		, Vec4 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTextureProj2DRectI4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg32 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg16 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg8 const & image
		, Vec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR32 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR16 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR8 const & image
		, Vec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg32 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg16 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage1DRg8 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR32 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR16 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage1DR8 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg32 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg16 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg8 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR32 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR16 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR8 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg32 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg16 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRg8 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR32 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR16 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DR8 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage3DRg32 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage3DRg16 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage3DRg8 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage3DR32 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage3DR16 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage3DR8 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg32 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg16 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg8 const & image
		, Vec3 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU3Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR32 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU3R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR16 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU3R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR8 const & image
		, Vec3 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU3R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureProj( USampledImage2DRectRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg32 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg16 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 textureProj( USampledImage2DRectRg8 const & image
		, Vec4 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DRectU4Rg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR32 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU4R32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR16 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU4R16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt textureProj( USampledImage2DRectR8 const & image
		, Vec4 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DRectU4R8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float textureProj( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float textureProj( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float textureProj( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float textureProj( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float textureProj( SampledImage2DRectShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Float textureProj( SampledImage2DRectShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjBias
	/**
	*name
	*	textureProjBias
	*/
	/**@{*/
	Vec4 textureProj( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProj( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProj( SampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProj( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProj( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Int textureProj( ISampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProj( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProj( USampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	UInt textureProj( USampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & bias )
	{
		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj1DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj1DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj2DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	Float textureProj( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj2DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureLod
	/**
	*name
	*	textureLod
	*/
	/**@{*/
	Vec4 textureLod( SampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DR32 const & image
		, Float const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DR16 const & image
		, Float const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureLod( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureLod( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DRgba8 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DRg8 const & image
		, Float const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DR32 const & image
		, Float const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DR16 const & image
		, Float const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DR8 const & image
		, Float const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureLod( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureLod( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureLod( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DRgba8 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DRg8 const & image
		, Float const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DR32 const & image
		, Float const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DR16 const & image
		, Float const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DR8 const & image
		, Float const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureLod( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureLod( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureLod( USampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureLod( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureOffset
	/**
	*name
	*	textureOffset
	*/
	/**@{*/
	Vec4 textureOffset( SampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DR32 const & image
		, Float const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DR16 const & image
		, Float const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba8 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg8 const & image
		, Float const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DR32 const & image
		, Float const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DR16 const & image
		, Float const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DR8 const & image
		, Float const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage3DR8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba8 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg8 const & image
		, Float const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DR32 const & image
		, Float const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DR16 const & image
		, Float const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DR8 const & image
		, Float const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage3DR8 const & image
		, Vec3 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureOffset( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureOffsetBias
	/**
	*name
	*	textureOffsetBias
	*/
	/**@{*/
	Vec4 textureOffset( SampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DR32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DR16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DRgba8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DRg8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DR32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DR16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DR8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage3DR8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DRgba8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DRg8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DR32 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DR16 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DR8 const & image
		, Float const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage3DRg8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage3DR32 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage3DR16 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage3DR8 const & image
		, Vec3 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset1DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset1DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset2DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureOffset( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset2DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texelFetch
	/**
	*name
	*	texelFetch
	*/
	/**@{*/
	Vec4 texelFetch( SampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage1DR32 const & image
		, Int const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage1DR16 const & image
		, Int const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 texelFetch( SampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float texelFetch( SampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DRgba8 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DRg8 const & image
		, Int const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DR32 const & image
		, Int const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DR16 const & image
		, Int const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DR8 const & image
		, Int const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRgba8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRg8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DR8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage3DRgba8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage3DRg8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage3DR8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage1DArrayRgba8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage1DArrayRg8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage1DArrayR8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 texelFetch( ISampledImage2DArrayRgba8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 texelFetch( ISampledImage2DArrayRg8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int texelFetch( ISampledImage2DArrayR8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DRgba8 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DRg8 const & image
		, Int const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DR32 const & image
		, Int const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DR16 const & image
		, Int const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DR8 const & image
		, Int const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DRgba8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DRg8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DR8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage3DRgba8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage3DRg8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage3DR8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage1DArrayRgba8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage1DArrayRg8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage1DArrayR8 const & image
		, IVec2 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 texelFetch( USampledImage2DArrayRgba8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 texelFetch( USampledImage2DArrayRg8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt texelFetch( USampledImage2DArrayR8 const & image
		, IVec3 const & P
		, Int const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 texelFetch( SampledImage2DRectRgba32 const & image
		, IVec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texelFetch( SampledImage2DRectRgba16 const & image
		, IVec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texelFetch( SampledImage2DRectRg32 const & image
		, IVec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texelFetch( SampledImage2DRectRg16 const & image
		, IVec2 const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texelFetch( SampledImage2DRectR32 const & image
		, IVec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexelFetch2DRectFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texelFetch( SampledImage2DRectR16 const & image
		, IVec2 const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexelFetch2DRectFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texelFetch( SampledImageBufferRgba32 const & image
		, Int const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexelFetchBufferFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 texelFetch( SampledImageBufferRgba16 const & image
		, Int const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTexelFetchBufferFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texelFetch( SampledImageBufferRg32 const & image
		, Int const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexelFetchBufferFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec2 texelFetch( SampledImageBufferRg16 const & image
		, Int const & P )
	{
		return Vec2{ findShader( image, P )
			, expr::makeTexelFetchBufferFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texelFetch( SampledImageBufferR32 const & image
		, Int const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexelFetchBufferFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Float texelFetch( SampledImageBufferR16 const & image
		, Int const & P )
	{
		return Float{ findShader( image, P )
			, expr::makeTexelFetchBufferFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRectRgba32 const & image
		, IVec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRectRgba16 const & image
		, IVec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImage2DRectRgba8 const & image
		, IVec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRectRg32 const & image
		, IVec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRectRg16 const & image
		, IVec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImage2DRectRg8 const & image
		, IVec2 const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImage2DRectR32 const & image
		, IVec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetch2DRectIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImage2DRectR16 const & image
		, IVec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetch2DRectIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImage2DRectR8 const & image
		, IVec2 const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetch2DRectIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImageBufferRgba32 const & image
		, Int const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImageBufferRgba16 const & image
		, Int const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 texelFetch( ISampledImageBufferRgba8 const & image
		, Int const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImageBufferRg32 const & image
		, Int const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImageBufferRg16 const & image
		, Int const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec2 texelFetch( ISampledImageBufferRg8 const & image
		, Int const & P )
	{
		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImageBufferR32 const & image
		, Int const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImageBufferR16 const & image
		, Int const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Int texelFetch( ISampledImageBufferR8 const & image
		, Int const & P )
	{
		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImage2DRectRgba32 const & image
		, IVec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImage2DRectRgba16 const & image
		, IVec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImage2DRectRgba8 const & image
		, IVec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetch2DRectURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImage2DRectRg32 const & image
		, IVec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImage2DRectRg16 const & image
		, IVec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImage2DRectRg8 const & image
		, IVec2 const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetch2DRectURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImage2DRectR32 const & image
		, IVec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetch2DRectUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImage2DRectR16 const & image
		, IVec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetch2DRectUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImage2DRectR8 const & image
		, IVec2 const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetch2DRectUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImageBufferRgba32 const & image
		, Int const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImageBufferRgba16 const & image
		, Int const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 texelFetch( USampledImageBufferRgba8 const & image
		, Int const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImageBufferRg32 const & image
		, Int const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImageBufferRg16 const & image
		, Int const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec2 texelFetch( USampledImageBufferRg8 const & image
		, Int const & P )
	{
		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImageBufferR32 const & image
		, Int const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImageBufferR16 const & image
		, Int const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UInt texelFetch( USampledImageBufferR8 const & image
		, Int const & P )
	{
		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texelFetchOffset
	/**
	*name
	*	texelFetchOffset
	*/
	/**@{*/
	Vec4 texelFetchOffset( SampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage1DR32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage1DR16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DRgba8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DRg8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DR32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DR16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DR8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRgba8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRg8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DR8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage3DRgba8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage3DRg8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage3DR8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage1DArrayRgba8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage1DArrayRg8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage1DArrayR8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DArrayRgba8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DArrayRg8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DArrayR8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DRgba32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DRgba16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DRgba8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DRg32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DRg16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DRg8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DR32 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DR16 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DR8 const & image
		, Int const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRgba8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRg8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DR32 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DR16 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DR8 const & image
		, IVec2 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage3DRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage3DRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage3DRgba8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage3DRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage3DRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage3DRg8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage3DR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage3DR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage3DR8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DArrayRgba32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DArrayRgba16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage1DArrayRgba8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DArrayRg32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DArrayRg16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage1DArrayRg8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DArrayR32 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DArrayR16 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage1DArrayR8 const & image
		, IVec2 const & P
		, Int const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DArrayRgba32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DArrayRgba16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DArrayRgba8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DArrayRg32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DArrayRg16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DArrayRg8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DArrayR32 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DArrayR16 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DArrayR8 const & image
		, IVec3 const & P
		, Int const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DRectRgba32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 texelFetchOffset( SampledImage2DRectRgba16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DRectRg32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 texelFetchOffset( SampledImage2DRectRg16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DRectR32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float texelFetchOffset( SampledImage2DRectR16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRectRgba32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRectRgba16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 texelFetchOffset( ISampledImage2DRectRgba8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRectRg32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRectRg16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 texelFetchOffset( ISampledImage2DRectRg8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DRectR32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DRectR16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int texelFetchOffset( ISampledImage2DRectR8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRectRgba32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRectRgba16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 texelFetchOffset( USampledImage2DRectRgba8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRectRg32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRectRg16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 texelFetchOffset( USampledImage2DRectRg8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DRectR32 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DRectR16 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt texelFetchOffset( USampledImage2DRectR8 const & image
		, IVec2 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTexelFetchOffset2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjOffset
	/**
	*name
	*	textureProjOffset
	*/
	/**@{*/
	Vec4 textureProjOffset( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRectRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRectRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRectRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRectRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DR8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage3DR8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRectRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Int textureProjOffset( ISampledImage2DRectR8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR8 const & image
		, Vec2 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage1DR8 const & image
		, Vec4 const & P
		, Int const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DR8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage3DR8 const & image
		, Vec4 const & P
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRectRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR32 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR16 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UInt textureProjOffset( USampledImage2DRectR8 const & image
		, Vec4 const & P
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DRectU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Float textureProjOffset( SampledImage2DRectShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjOffsetBias
	/**
	*name
	*	textureProjOffsetBias
	*/
	/**@{*/
	Vec4 textureProjOffset( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec4 textureProjOffset( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Vec2 textureProjOffset( SampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage2DR8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec4 textureProjOffset( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	IVec2 textureProjOffset( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Int textureProjOffset( ISampledImage3DR8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR32 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR16 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR8 const & image
		, Vec2 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR32 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR16 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage1DR8 const & image
		, Vec4 const & P
		, Int const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage2DRg8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR32 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR16 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage2DR8 const & image
		, Vec4 const & P
		, IVec2 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec4 textureProjOffset( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UVec2 textureProjOffset( USampledImage3DRg8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage3DR32 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage3DR16 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	UInt textureProjOffset( USampledImage3DR8 const & image
		, Vec4 const & P
		, IVec3 const & offset
		, Float const & bias )
	{
		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset1DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Int const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset1DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset2DShadowFBiasR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	Float textureProjOffset( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset
		, Float const & bias )
	{
		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset2DShadowFBiasR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureLodOffset
	/**
	*name
	*	textureLodOffset
	*/
	/**@{*/
	Vec4 textureLodOffset( SampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DR32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DR16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureLodOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureLodOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DRgba8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DRg8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DR32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DR16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DR8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureLodOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureLodOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureLodOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DRgba32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DRgba16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DRgba8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DRg32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DRg16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DRg8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DR32 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DR16 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DR8 const & image
		, Float const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage3DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage3DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage3DRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage3DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage3DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage3DR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureLodOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureLodOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureLodOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureLodOffset( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjLod
	/**
	*name
	*	textureProjLod
	*/
	/**@{*/
	Vec4 textureProjLod( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec4 textureProjLod( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Vec2 textureProjLod( SampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec4 textureProjLod( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	IVec2 textureProjLod( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Int textureProjLod( ISampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec4 textureProjLod( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UVec2 textureProjLod( USampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	UInt textureProjLod( USampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & lod )
	{
		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	Float textureProjLod( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & lod )
	{
		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjLodOffset
	/**
	*name
	*	textureProjLodOffset
	*/
	/**@{*/
	Vec4 textureProjLodOffset( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjLodOffset( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjLodOffset( SampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjLodOffset( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjLodOffset( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Int textureProjLodOffset( ISampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, Int const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR32 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR16 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR8 const & image
		, Vec3 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage2DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage2DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjLodOffset( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage3DRg32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage3DRg16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjLodOffset( USampledImage3DRg8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage3DR32 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage3DR16 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	UInt textureProjLodOffset( USampledImage3DR8 const & image
		, Vec4 const & P
		, Float const & lod
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & lod
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	Float textureProjLodOffset( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Float const & lod
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGrad
	/**
	*name
	*	textureGrad
	*/
	/**@{*/
	Vec4 textureGrad( SampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImageCubeRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImageCubeRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImageCubeR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImageCubeR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec4 textureGrad( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Vec2 textureGrad( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DRgba8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DRg8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DR8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage3DR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec4 textureGrad( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	IVec2 textureGrad( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Int textureGrad( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DRgba8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DRg8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DR8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage3DRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage3DR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec4 textureGrad( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UVec2 textureGrad( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	UInt textureGrad( USampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy )
	{
		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	Float textureGrad( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGradOffset
	/**
	*name
	*	textureGradOffset
	*/
	/**@{*/
	Vec4 textureGradOffset( SampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGradOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureGradOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DRgba8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DRg8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DR8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage3DRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage3DRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage3DR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGradOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureGradOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureGradOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DRgba32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DRgba16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DRgba8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DRg32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DRg16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DRg8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DR32 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DR16 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DR8 const & image
		, Float const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage3DRgba32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage3DRgba16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage3DRgba8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage3DRg32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage3DRg16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage3DRg8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage3DR32 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage3DR16 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage3DR8 const & image
		, Vec3 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DArrayRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DArrayRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage1DArrayRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DArrayRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DArrayRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage1DArrayRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DArrayR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DArrayR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage1DArrayR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGradOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureGradOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureGradOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DShadowR32 const & image
		, Float const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DShadowR16 const & image
		, Float const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DArrayShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage1DArrayShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureGradOffset( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjGrad
	/**
	*name
	*	textureProjGrad
	*/
	/**@{*/
	Vec4 textureProjGrad( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec4 textureProjGrad( SampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Vec2 textureProjGrad( SampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DR8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage3DR8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec4 textureProjGrad( ISampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	IVec2 textureProjGrad( ISampledImage2DRectRg8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Int textureProjGrad( ISampledImage2DRectR8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & pDx
		, Float const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRg8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DR8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage3DRg8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage3DR8 const & image
		, Vec4 const & P
		, Vec3 const & pDx
		, Vec3 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR8 const & image
		, Vec3 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec4 textureProjGrad( USampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UVec2 textureProjGrad( USampledImage2DRectRg8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	UInt textureProjGrad( USampledImage2DRectR8 const & image
		, Vec4 const & P
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DRectU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & pDx
		, Float const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	Float textureProjGrad( SampledImage2DRectShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & pDx
		, Vec2 const & pDy )
	{
		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjGradOffset
	/**
	*name
	*	textureProjGradOffset
	*/
	/**@{*/
	Vec4 textureProjGradOffset( SampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec4 textureProjGradOffset( SampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Vec2 textureProjGradOffset( SampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectF4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRgba8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRg8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DR8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage3DRgba8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage3DRg8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage3DR8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec4 textureProjGradOffset( ISampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	IVec2 textureProjGradOffset( ISampledImage2DRectRg8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Int textureProjGradOffset( ISampledImage2DRectR8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectI4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR32 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR16 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR8 const & image
		, Vec2 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage1DRgba8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage1DRg8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR32 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR16 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage1DR8 const & image
		, Vec4 const & P
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRgba8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRg8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DR8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage3DRgba32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage3DRgba16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage3DRgba8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage3DRg32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage3DRg16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage3DRg8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage3DR32 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage3DR16 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage3DR8 const & image
		, Vec4 const & P
		, Vec3 const & dPdx
		, Vec3 const & dPdy
		, IVec3 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR32 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR16 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR8 const & image
		, Vec3 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU3R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec4 textureProjGradOffset( USampledImage2DRectRgba8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UVec2 textureProjGradOffset( USampledImage2DRectRg8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4Rg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR32 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4R32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR16 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4R16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	UInt textureProjGradOffset( USampledImage2DRectR8 const & image
		, Vec4 const & P
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectU4R8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage1DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Float const & dPdx
		, Float const & dPdy
		, Int const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	Float textureProjGradOffset( SampledImage2DRectShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Vec2 const & dPdx
		, Vec2 const & dPdy
		, IVec2 const & offset )
	{
		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGather
	/**
	*name
	*	textureGather
	*/
	/**@{*/
	Vec4 textureGather( SampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DRectFR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIRg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR8 const & image
		, Vec2 const & P )
	{
		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectIR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRg32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRg16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRg8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DR32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DR16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DR8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeR32 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeR16 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeR8 const & image
		, Vec3 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR32 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR16 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR8 const & image
		, Vec4 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURgba32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURgba16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURgba8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURg32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURg16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectURg8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR32 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectUR32( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR16 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectUR16( makeExpr( image )
				, makeExpr( P ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR8 const & image
		, Vec2 const & P )
	{
		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DRectUR8( makeExpr( image )
				, makeExpr( P ) ) };
	}
	Vec4 textureGather( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImageCubeShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImageCubeShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayShadowR32 const & image
		, Vec4 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayShadowR16 const & image
		, Vec4 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	Vec4 textureGather( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ )
	{
		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherComp
	/**
	*name
	*	textureGatherComp
	*/
	/**@{*/
	Vec4 textureGather( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGather( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeRg8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeR8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGather( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DR8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRgba8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeRg8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeR32 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeR16 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeR8 const & image
		, Vec3 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRgba8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayRg8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR32 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR16 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImageCubeArrayR8 const & image
		, Vec4 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGather( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DRectUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffset
	/**
	*name
	*	textureGatherOffset
	*/
	/**@{*/
	Vec4 textureGatherOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset )
	{
		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, IVec2 const & offset )
	{
		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsetComp
	/**
	*name
	*	textureGatherOffsetComp
	*/
	/**@{*/
	Vec4 textureGatherOffset( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffset( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffset( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffset( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, IVec2 const & offset
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DRectUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsets
	/**
	*name
	*	textureGatherOffsets
	*/
	/**@{*/
	Vec4 textureGatherOffsets( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectIR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectURg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectUR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectUR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets )
	{
		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DRectUR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayShadowR32 const & image
		, Vec3 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DArrayShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayShadowR16 const & image
		, Vec3 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DArrayShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectShadowR32 const & image
		, Vec2 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DRectShadowFR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectShadowR16 const & image
		, Vec2 const & P
		, Float const & refZ
		, Array< IVec2 > const & offsets )
	{
		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DRectShadowFR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsetsComp
	/**
	*name
	*	textureGatherOffsetsComp
	*/
	/**@{*/
	Vec4 textureGatherOffsets( SampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	Vec4 textureGatherOffsets( SampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectFCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	IVec4 textureGatherOffsets( ISampledImage2DRectR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectICompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRgba8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayRg8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR32 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR16 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DArrayR8 const & image
		, Vec3 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRgba32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRgba16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRgba8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRgba8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRg32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRg16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectRg8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompRg8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR32 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompR32( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR16 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompR16( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	UVec4 textureGatherOffsets( USampledImage2DRectR8 const & image
		, Vec2 const & P
		, Array< IVec2 > const & offsets
		, Int const & comp )
	{
		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DRectUCompR8( makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
}
