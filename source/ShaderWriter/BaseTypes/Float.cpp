/*
See LICENSE file in root folder
*/
#include "ShaderWriter/BaseTypes/Float.hpp"

namespace
{
	void compileFloat()
	{
		auto a = 0.0_f;
		auto b = 1.0_f;
		a += b;
		a -= b;
		a *= b;
		a /= b;
		a == b;
		a != b;
		a <= b;
		a >= b;
		a < b;
		a > b;
		a + b;
		a - b;
		a * b;
		a / b;
		a += 1.0f;
		a -= 1.0f;
		a *= 1.0f;
		a /= 1.0f;
		a == 1.0f;
		a != 1.0f;
		a <= 1.0f;
		a >= 1.0f;
		a < 1.0f;
		a > 1.0f;
		a + 1.0f;
		a - 1.0f;
		a * 1.0f;
		a / 1.0f;
		1.0f == a;
		1.0f != a;
		1.0f <= a;
		1.0f >= a;
		1.0f < a;
		1.0f > a;
		1.0f + a;
		1.0f - a;
		1.0f * a;
		1.0f / a;

		auto c = sdw::Optional< sdw::Float >{ b, false };
		a += c;
		a -= c;
		a *= c;
		a /= c;
		a == c;
		a != c;
		a <= c;
		a >= c;
		a < c;
		a > c;
		a + c;
		a - c;
		a * c;
		a / c;
		c += b;
		c -= b;
		c *= b;
		c /= b;
		c == b;
		c != b;
		c <= b;
		c >= b;
		c < b;
		c > b;
		c + b;
		c - b;
		c * b;
		c / b;
		c += 1.0f;
		c -= 1.0f;
		c *= 1.0f;
		c /= 1.0f;
		c == 1.0f;
		c != 1.0f;
		c <= 1.0f;
		c >= 1.0f;
		c < 1.0f;
		c > 1.0f;
		c + 1.0f;
		c - 1.0f;
		c * 1.0f;
		c / 1.0f;
		1.0f == c;
		1.0f != c;
		1.0f <= c;
		1.0f >= c;
		1.0f < c;
		1.0f > c;
		1.0f + c;
		1.0f - c;
		1.0f * c;
		1.0f / c;

		auto d = sdw::Optional< sdw::Float >{ b, false };
		a += d;
		a -= d;
		a *= d;
		a /= d;
		a == d;
		a != d;
		a <= d;
		a >= d;
		a < d;
		a > d;
		a + d;
		a - d;
		a * d;
		a / d;
		d += b;
		d -= b;
		d *= b;
		d /= b;
		d == b;
		d != b;
		d <= b;
		d >= b;
		d < b;
		d > b;
		d + b;
		d - b;
		d * b;
		d / b;
		d += 1.0f;
		d -= 1.0f;
		d *= 1.0f;
		d /= 1.0f;
		d == 1.0f;
		d != 1.0f;
		d <= 1.0f;
		d >= 1.0f;
		d < 1.0f;
		d > 1.0f;
		d + 1.0f;
		d - 1.0f;
		d * 1.0f;
		d / 1.0f;
		1.0f == d;
		1.0f != d;
		1.0f <= d;
		1.0f >= d;
		1.0f < d;
		1.0f > d;
		1.0f + d;
		1.0f - d;
		1.0f * d;
		1.0f / d;

		auto e = sdw::MaybeOptional< sdw::Float >{ c };
		a += e;
		a -= e;
		a *= e;
		a /= e;
		a == e;
		a != e;
		a <= e;
		a >= e;
		a < e;
		a > e;
		a + e;
		a - e;
		a * e;
		a / e;
		e += b;
		e -= b;
		e *= b;
		e /= b;
		e == b;
		e != b;
		e <= b;
		e >= b;
		e < b;
		e > b;
		e + b;
		e - b;
		e * b;
		e / b;
		e += 1.0f;
		e -= 1.0f;
		e *= 1.0f;
		e /= 1.0f;
		e == 1.0f;
		e != 1.0f;
		e <= 1.0f;
		e >= 1.0f;
		e < 1.0f;
		e > 1.0f;
		e + 1.0f;
		e - 1.0f;
		e * 1.0f;
		e / 1.0f;
		1.0f == e;
		1.0f != e;
		1.0f <= e;
		1.0f >= e;
		1.0f < e;
		1.0f > e;
		1.0f + e;
		1.0f - e;
		1.0f * e;
		1.0f / e;

		auto f = sdw::MaybeOptional< sdw::Float >{ b };
		a += f;
		a -= f;
		a *= f;
		a /= f;
		a == f;
		a != f;
		a <= f;
		a >= f;
		a < f;
		a > f;
		a + f;
		a - f;
		a * f;
		a / f;
		f += b;
		f -= b;
		f *= b;
		f /= b;
		f == b;
		f != b;
		f <= b;
		f >= b;
		f < b;
		f > b;
		f + b;
		f - b;
		f * b;
		f / b;
		f += 1.0f;
		f -= 1.0f;
		f *= 1.0f;
		f /= 1.0f;
		f == 1.0f;
		f != 1.0f;
		f <= 1.0f;
		f >= 1.0f;
		f < 1.0f;
		f > 1.0f;
		f + 1.0f;
		f - 1.0f;
		f * 1.0f;
		f / 1.0f;
		1.0f == f;
		1.0f != f;
		1.0f <= f;
		1.0f >= f;
		1.0f < f;
		1.0f > f;
		1.0f + f;
		1.0f - f;
		1.0f * f;
		1.0f / f;
	}
}
